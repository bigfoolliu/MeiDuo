"""
Django settings for MeiDuo project.

Generated by 'django-admin startproject' using Django 2.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# 注意此处的BASE_DIR的目录不是与项目目录同级,而是与下一级的MeiDuo同一级
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 添加导包路径,实现app注册的简化
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'qo*ssi=br(+5c67v_7d1v_lmkvkxaip&z@)^mw95d-x73gh9y^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 修改默认的localhost为不同的域名,进行访问
ALLOWED_HOSTS = [
    'api.meiduo.site',
    '127.0.0.1',
    'localhost',
    'www.meiduo.site'
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'MeiDuo.apps.users.apps.UsersConfig',  # 未添加导包路径时的注册app
    'rest_framework',  # 注册drf
    'corsheaders',  # 添加该应用以使项目后端支持跨域访问前端
    'users.apps.UsersConfig',  # 在添加了导包路径之后更简单的注册app
    'verifications.apps.VerificationsConfig',  # 注册验证应用
    'oauth.apps.OauthConfig',  # 注册第三方登录应用
    'areas.apps.AreasConfig',  # 注册地区应用
    'goods.apps.GoodsConfig',  # 注册商品应用
    'contents.apps.ContentsConfig',  # 注册另一商品应用
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # 支持跨域访问的中间件
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'MeiDuo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, '../templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'MeiDuo.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'meiduo_mall',
        'USER': 'tonyliu',
        'PASSWORD': 'liu941103',
        'HOST': '',
        'PORT': '3306',
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

# 配置redis数据库进行数据缓存,可参考: http://django-redis-chs.readthedocs.io/zh_CN/latest/
CACHES = {
    # 默认的配置
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 'session'在redis中的配置
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 短信验证码在redis中的配置
    "sms_code": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
}
# 指定session使用缓存进行保存
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
# 缓存设置保存在redis
SESSION_CACHE_ALIAS = "session"

# 日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器
    'formatters': {  # 日志信息显示的格式
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {  # 对日志进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志处理方法
        'console': {  # 向终端中输出日志
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {  # 向文件中输出日志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "logs/MeiDuo.log"),  # 日志文件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {  # 日志器
        'django': {  # 定义了一个名为django的日志器
            'handlers': ['console', 'file'],  # 可以同时向终端与文件中输出日志
            'propagate': True,  # 是否继续传递日志信息
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
    }
}

# drf配置
REST_FRAMEWORK = {
    # 异常处理
    'EXCEPTION_HANDLER': 'utils.exceptions.exception_handler',
    # 身份认证的顺序：jwt,session,basic(一删除)
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',  # 前后端分离使用jwt验证
        'rest_framework.authentication.SessionAuthentication',  # # 访问admin后台仍然使用session认证
    ),
}

# 对地区进行缓存配置
REST_FRAMEWORK_EXTENSIONS = {
    # 缓存时间
    'DEFAULT_CACHE_RESPONSE_TIMEOUT': 60 * 60,
    # 缓存存储
    'DEFAULT_USE_CACHE': 'default',  # 这里指定的CACHES里面的缓存方案
}

# 配置jwt
import datetime
JWT_AUTH = {
    # jwt的token有效时间设为2小时
    'JWT_EXPIRATION_DELTA': datetime.timedelta(hours=2),
    # 指定登录认证时返回的数据(调用的函数)
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'users.utils.jwt_response_payload_handler',
}

# 告知Django认证系统使用我们自定义的模型类,而不继续使用django自带的里面的类
AUTH_USER_MODEL = 'users.User'

# cors(跨域访问配置)
# 添加白名单,凡是出现在白名单中的域名，都可以访问后端接口
CORS_ORIGIN_WHITELIST = (
    '127.0.0.1:8080',
    'localhost:8080',
    'www.meiduo.site:8080',
    'api.meiduo.site:8000',
)
# 指明在跨域访问中，后端是否支持对cookie的操作
CORS_ALLOW_CREDENTIALS = True


# 指定登录时的认证后端
AUTHENTICATION_BACKENDS = [
    'users.utils.MyModelBackend',
]

# 添加QQ登录的配置信息
QQ_CLIENT_ID = '101474184'  # 注册申请的appid
QQ_CLIENT_SECRET = 'c6ce949e04e12ecc909ae6a8b09b637c'  # 注册申请的appkey
QQ_REDIRECT_URI = 'http://www.meiduo.site:8080/oauth_callback.html'  # 回调地址,即根据qq账号是否有绑定的账户显示不同
QQ_STATE = '/'  # 登录成功成功之后返回到网站的哪个页面

# 配置邮箱服务器
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # django邮箱后端,不可更改
# EMAIL_HOST = 'smtp.163.com'  # 邮件服务器发送邮件域名,可更改
EMAIL_HOST = 'smtp.qq.com'  # 邮件服务器发送邮件域名,可更改
# EMAIL_PORT = 25  # 邮件服务器发送邮件端口
EMAIL_PORT = 25  # 邮件服务器发送邮件端口
# EMAIL_HOST_USER = 'itcast88@163.com'  # 发送邮件的邮箱
EMAIL_HOST_USER = '2713281245@qq.com'  # 发送邮件的邮箱
# EMAIL_HOST_PASSWORD = 'itheima808'  # 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'pglpvhvpqvaodegi'  # 在邮箱中设置的客户端授权密码
# EMAIL_FROM = '美多商城<itcast88@163.com>'  # 收件人看到的发件人
EMAIL_FROM = '美多商城<2713281245@qq.com>'  # 收件人看到的发件人


# fastdfs配置
FDFS_CLIENT_CONF = os.path.join(BASE_DIR, 'utils/fast_dfs/client.conf')
# 访问fastdfs的地址配置
FDFS_URL = 'http://image.meiduo.site:8888/'
# 更改django文件存储,指定为自己写的存储类
DEFAULT_FILE_STORAGE = 'utils.fast_dfs.storage.FdfsStorage'
